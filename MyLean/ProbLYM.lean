
import Mathlib.Data.Fin.Basic
import Mathlib.Data.Fintype.Perm
import Mathlib.Algebra.BigOperators.Ring
import Mathlib.Algebra.Field.Rat
import Mathlib.Algebra.Order.Field.Basic
import Mathlib.Algebra.Order.Field.Rat
import Mathlib.Probability.UniformOn

--set_option linter.unusedSectionVars false

--set_option diagnostics true
--set_option diagnostics.threshold 10

open BigOperators Finset Set MeasureTheory ProbabilityTheory
open MeasureTheory.Measure
open scoped ENNReal

noncomputable section

variable (Œ± : Type*) [Fintype Œ±] [DecidableEq Œ±]

def Numbering := Œ± ‚âÉ Fin (Fintype.card Œ±)

instance : Fintype (Numbering Œ±) := Equiv.instFintype

theorem numbering_card : Fintype.card (Numbering Œ±) = (Fintype.card Œ±).factorial := by
  exact Fintype.card_equiv (Fintype.equivFinOfCardEq rfl)

def setPrefix (s : Finset Œ±) : Finset (Numbering Œ±) :=
  { p : Numbering Œ± | ‚àÄ a : Œ±, a ‚àà s ‚Üî p.toFun a < s.card }

theorem set_prefix_subset {s t : Finset Œ±} {p : Numbering Œ±} (h_s : p ‚àà setPrefix Œ± s) (h_t : p ‚àà setPrefix Œ± t)
    (h_st : s.card ‚â§ t.card) : s ‚äÜ t := by
  intro a h_as
  simp [setPrefix] at h_s h_t
  exact (h_t a).mpr (lt_of_le_of_lt' h_st ((h_s a).mp h_as))

def setNumbering (s : Finset Œ±) : Finset (Œ± ‚Üí Fin (Fintype.card Œ±)) :=
  { f : Œ± ‚Üí Fin (Fintype.card Œ±) | (‚àÄ a ‚àà s, f a < s.card) ‚àß (‚àÄ a ‚àà s, ‚àÄ a' ‚àà s, f a = f a' ‚Üí a = a') ‚àß (‚àÄ b ‚àà s·∂ú, (f b : ‚Ñï) = 0) }

theorem set_numbering_card (s : Finset Œ±) :
    (setNumbering Œ± s).card = s.card.factorial := by
  sorry

theorem set_prefix_card (s : Finset Œ±) :
    (setPrefix Œ± s).card = s.card.factorial * (Fintype.card Œ± - s.card).factorial := by
  sorry

instance : MeasurableSpace (Numbering Œ±) := ‚ä§
instance : MeasurableSingletonClass (Numbering Œ±) := ‚ü®fun _ => trivial‚ü©

lemma set_prefix_count (s : Finset Œ±) :
    count (setPrefix Œ± s).toSet = ‚Üë(s.card.factorial * (Fintype.card Œ± - s.card).factorial) := by
  rw [‚Üê set_prefix_card Œ± s, count_apply_finset]

lemma aux_1 {k m n : ‚Ñï} (hn : 0 < n) (heq : k * m = n) :
    (‚Üë m : ENNReal) / (‚Üë n : ENNReal) = 1 / (‚Üë k : ENNReal) := by
  -- The following proof is due to Aaron Liu.
  subst heq
  have hm : m ‚â† 0 := by rintro rfl ; simp at hn
  have hk : k ‚â† 0 := by rintro rfl ; simp at hn
  refine (ENNReal.toReal_eq_toReal ?_ ?_).mp ?_
  ¬∑ intro h
    apply_fun ENNReal.toReal at h
    simp [hm, hk] at h
  ¬∑ intro h
    apply_fun ENNReal.toReal at h
    simp [hk] at h
  ¬∑ field_simp
    ring

theorem set_prefix_prob (s : Finset Œ±) :
    uniformOn Set.univ (setPrefix Œ± s).toSet = 1 / (Fintype.card Œ±).choose s.card := by
  rw [uniformOn_univ, set_prefix_count, numbering_card]
  apply aux_1 (Nat.factorial_pos (Fintype.card Œ±))
  rw [‚Üê mul_assoc]
  exact Nat.choose_mul_factorial_mul_factorial (Finset.card_le_univ s)

theorem set_prefix_disj {s t : Finset Œ±} (h_st : ¬¨ s ‚äÜ t) (h_ts : ¬¨ t ‚äÜ s) :
    Disjoint (setPrefix Œ± s).toSet (setPrefix Œ± t).toSet := by
  refine Set.disjoint_iff.mpr ?_
  intro p
  simp only [mem_inter_iff, mem_coe, mem_empty_iff_false, imp_false, not_and]
  intro h_s h_t
  rcases Nat.le_total s.card t.card with h_st' | h_ts'
  ¬∑ exact h_st (set_prefix_subset Œ± h_s h_t h_st')
  ¬∑ exact h_ts (set_prefix_subset Œ± h_t h_s h_ts')

variable (ùìê : Finset (Finset Œ±))

theorem LYM_inequality (hùìê : IsAntichain (¬∑ ‚äÜ ¬∑) (ùìê : Set (Finset Œ±))) :
    ‚àë s in ùìê, ((1 : ‚Ñù) / (Fintype.card Œ±).choose s.card) ‚â§ 1 := by
  sorry
