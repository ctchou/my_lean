
import Mathlib.Data.Fin.Basic
import Mathlib.Data.Fintype.Perm
import Mathlib.Algebra.BigOperators.Ring
import Mathlib.Algebra.Field.Rat
import Mathlib.Algebra.Order.Field.Basic
import Mathlib.Algebra.Order.Field.Rat
import Mathlib.Probability.UniformOn

--set_option diagnostics true
--set_option diagnostics.threshold 10

open BigOperators MeasureTheory ProbabilityTheory
open MeasureTheory.Measure
open scoped ENNReal

noncomputable section

variable (Œ± : Type*) [Fintype Œ±] [DecidableEq Œ±]

def Perm := Œ± ‚âÉ Fin (Fintype.card Œ±)

instance : Fintype (Perm Œ±) := Equiv.instFintype

theorem num_perms_all : Fintype.card (Perm Œ±) = (Fintype.card Œ±).factorial := by
  refine Fintype.card_equiv (Fintype.equivFinOfCardEq rfl)

def hasSetPrefix (s : Finset Œ±) : Finset (Perm Œ±) :=
  { p : Perm Œ± | ‚àÄ a ‚àà s, p.toFun a ‚â§ s.card }

theorem num_perms_set_prefix (s : Finset Œ±) :
    (hasSetPrefix Œ± s).card = s.card.factorial * (Fintype.card Œ± - s.card).factorial := by
--    Fintype.card { p : Perm Œ± // p ‚àà hasSetPrefix Œ± s } = s.card.factorial * (Fintype.card Œ± - s.card).factorial := by
  sorry

instance : MeasurableSpace (Perm Œ±) := ‚ä§
instance : MeasurableSingletonClass (Perm Œ±) := ‚ü®fun _ => trivial‚ü©

theorem count_perms_set_prefix (s : Finset Œ±) :
    count (hasSetPrefix Œ± s).toSet = ‚Üë(s.card.factorial * (Fintype.card Œ± - s.card).factorial) := by
  rw [‚Üê num_perms_set_prefix Œ± s, count_apply_finset]

/-- The following proof is due to Aaron Liu. -/
lemma aux_1 {k m n : ‚Ñï} (hn : 0 < n) (heq : k * m = n) :
    (‚Üë m : ENNReal) / (‚Üë n : ENNReal) = 1 / (‚Üë k : ENNReal) := by
  subst heq
  have hm : m ‚â† 0 := by rintro rfl ; simp at hn
  have hk : k ‚â† 0 := by rintro rfl ; simp at hn
  refine (ENNReal.toReal_eq_toReal ?_ ?_).mp ?_
  ¬∑ intro h
    apply_fun ENNReal.toReal at h
    simp [hm, hk] at h
  ¬∑ intro h
    apply_fun ENNReal.toReal at h
    simp [hk] at h
  ¬∑ field_simp
    ring

theorem prob_set_prefix (s : Finset Œ±) :
    uniformOn Set.univ (hasSetPrefix Œ± s).toSet = 1 / (Fintype.card Œ±).choose s.card := by
  rw [uniformOn_univ, count_perms_set_prefix, num_perms_all]
  apply aux_1 (Nat.factorial_pos (Fintype.card Œ±))
  rw [‚Üê mul_assoc]
  exact Nat.choose_mul_factorial_mul_factorial (Finset.card_le_univ s)

variable (ùìê : Finset (Finset Œ±))

theorem LYM_inequality (hùìê : IsAntichain (¬∑ ‚äÜ ¬∑) (ùìê : Set (Finset Œ±))) :
    ‚àë s in ùìê, (1 / (Fintype.card Œ±).choose s.card) ‚â§ 1 := by
  sorry

end
